@page "/modificarAlumno/{id:int}"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos;
@inject IServicioAlumnos ServicioAlumnos
@inject NavigationManager navigationManager
@inject IServicioLogin SevicioLogin
@attribute [Authorize]

<h3>Modificar Alumno</h3>
<hr />
<div class="row justify-content-center m-3">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-header">
                <h1>@alumno.Nombre</h1>
            </div>
            <div class="card-body text-center">
                <img class="card-img-top" src="@alumno.Foto" />
            </div>
        </div>
        <EditForm Model="@alumno" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group row">
                <label for="Nombre" class="col-sm-2 col-form-label">Nombre</label>
                <div class="col-sm-10">
                    <InputText id="Nombre" class="form-control" placeholder="Nombre del alumno" @bind-Value="alumno.Nombre"></InputText>
                    <ValidationMessage For="@(() => alumno.Nombre)"></ValidationMessage>
                </div>
            </div>
            <div class="form-group row">
                <label for="Email" class="col-sm-2 col-form-">Email</label>
                <div class="col-sm-10">
                    <InputText id="Email" class="form-control" placeholder="Email" @bind-Value="alumno.Email"></InputText>
                    <ValidationMessage For="@(() => alumno.Email)"></ValidationMessage>
                </div>
            </div>
            <div class="form-group row">
                <label for="Foto" class="col-sm-2 col-form-label">Foto</label>
                <div class="col-sm-10">
                    <InputFile OnChange="FicheroSeleccionado" @bind-Value="alumno.Foto"></InputFile>
                    <ValidationMessage For="@(() => alumno.Foto)"></ValidationMessage>
                    @if (fichero != null)
                    {
                        <p><strong>Fichero seleccionado: @fichero.Name</strong></p>
                    }
                </div>
            </div>

            <div class="form-group row">
                <label for="Email" class="col-sm-4 col-form-label">Alumno esta de baja: @alumno.FechaBaja</label>
            </div>



            <div class="row content">
                <div class="col-md-1">
                    <input type="submit" class="btn btn-primary" value="Guardar" @onclick="Guardar" />
                </div>
                <div class="col-md-2">
                    <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
                </div>
            </div>
        </EditForm>
    </div>
</div>

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                            @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}




@code{
    [Parameter]
    public int id { get; set; }
    Alumno alumno = new Alumno();
    IFileListEntry fichero;

    Boolean mostrarError = false;
    String textoError = String.Empty;

    Login l = new Login();
    UsuarioAPI u = new UsuarioAPI();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
            l.Password = Environment.GetEnvironmentVariable("UsuarioAPI");
            u = (await SevicioLogin.SolicitudLogin(l));
            Environment.SetEnvironmentVariable("Token", u.Token);

            if (id > 0)
            {
                alumno = await ServicioAlumnos.DameAlumno(id);
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }

    }

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    public void FicheroSeleccionado(IFileListEntry[] ficheros)
    {
        fichero = ficheros[0];
        string extension = Path.GetExtension(fichero.Name);
        if (extension != ".jpg")
            fichero = null;
    }

    protected async Task Guardar()
    {
        try
        {
            if (alumno.Nombre != null && alumno.Email != null)
            {
                if (fichero != null && fichero.Data != null)
                {
                    var ms = new MemoryStream();
                    await fichero.Data.CopyToAsync(ms);
                    string nombreFichero = "images/" + Guid.NewGuid() + ".jpg";
                    using (FileStream file = new FileStream("wwwroot/" + nombreFichero, FileMode.Create, FileAccess.Write))
                        ms.WriteTo(file);

                    alumno.Foto = nombreFichero;
                }
                alumno = (await ServicioAlumnos.ModificarAlumno(alumno.Id, alumno));
                navigationManager.NavigateTo("/listaAlumnos");
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }

    }

    protected void Cancelar()
    {
        navigationManager.NavigateTo("/listaAlumnos");
    }

    public Boolean dameValor()
    {
        Boolean estaDeBaja = false;
        if (alumno.FechaBaja != null)
            estaDeBaja = true;

        return estaDeBaja;
    }

    protected void CerrarError()
    {
        mostrarError = false;
    }

    protected void MostrarError()
    {

        mostrarError = true;
    }

}