@page "/ListaCursos"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos;
@inject IServicioCursos ServicioCurso
@inject NavigationManager navigationmanager
@inject IServicioLogin SevicioLogin


<h3>Lista Cursos</h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/NuevoCurso" class="btn btn-primary m-1">Nuevo Curso</a>
    </div>
</div>


@if (listaCursos == null)
{
    <div class="spinner"></div>
}
else if (listaCursos.Count == 0)
{
    <p class="text-danger">No hay cursos disponibles</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Curso</strong></th>
                <th><strong>Coste</strong></th>
                <th><strong>F. Inicio Precio</strong></th>
                <th><strong>F. Fin Precio</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Curso c in listaCursos)
                @foreach (Precio p in c.ListaPrecios)
                {
                    <tr>
                        <td>@c.NombreCurso</td>
                        <td class="text-success"><strong>$@p.Coste</strong></td>
                        <td>@p.FechaInicio.ToString("dd/MM/yyyy")</td>
                        <td>@p.FechaFin.ToString("dd/MM/yyyy")</td>
                        <td>
                            <a href="@($"ModificarCurso/{c.Id}/{p.Id}")" class="btn btn-primary m-1">Modificar</a>
                        </td>
                        <td>
                            <input type="submit" class="btn btn-danger" value="Eliminar" @onclick="(()=>Borrar(c.Id))" />
                        </td>
                    </tr>
                }
        </tbody>

    </table>

}


@if (MostrarPopUP)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-sm modal-notify modal-danger">
            <div class="modal-content text-center">
                <div class="modal-header d-flex justify-content-center bg">
                    <h3 class="alert-head text-danger">Dar de baja curso</h3>
                    <button type="button" class="close" @onclick="CerrarPop">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>

                <div class="modal-body bg-light">
                    <strong class="text-danger">Va dar de baja este curso. Si esta seguro continue. Si no cierre esta ventana</strong>
                    <br /><br />
                    <button type="button" class="btn btn-danger" @onclick="(() => DarDeBaja(idCursoBorrar))">Dar de baja</button>
                </div>
            </div>

        </div>

    </div>
}

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                            @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}




@code {
    public List<Curso> listaCursos { get; set; } = new List<Curso>();
    public Boolean MostrarPopUP = false;
    public int idCursoBorrar = -1;

    Boolean mostrarError = false;
    String textoError = String.Empty;

    Login l = new Login();
    Usuario u = new Usuario();

    //Recordar que pasando -1 nos devolvia todos los cursos sin filtrar por alumno
    protected override async Task OnInitializedAsync()
    {
        try
        {
            l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
            l.Password = Environment.GetEnvironmentVariable("UsuarioAPI");
            u = (await SevicioLogin.SolicitudLogin(l));
            Environment.SetEnvironmentVariable("Token", u.Token);

            mostrarError = false;
            listaCursos = (await ServicioCurso.DameCursos(-1)).ToList();
        }
        catch (Exception ex)
        {
            MostrarError();
            textoError = ex.Message;
            StateHasChanged();

        }
    }

    protected void Borrar(int curso)
    {
        idCursoBorrar = curso;
        MostrarPopUP = true;
    }

    protected void CerrarPop()
    {
        MostrarPopUP = false;
    }

    protected async void DarDeBaja(int idCursoBorrar)
    {
        try
        {
            await ServicioCurso.BorrarCurso(idCursoBorrar);
            CerrarPop();
            navigationmanager.NavigateTo("listaCursos", true);
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void CerrarError()
    {
        mostrarError = false;
        CerrarPop();
    }

    protected void MostrarError()
    {
        CerrarPop();
        mostrarError = true;
    }
}
