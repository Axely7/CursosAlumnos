@page "/ModificarCurso/{idCurso:int}/{idPrecio:int}"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos;
@inject IServicioCursos ServicioCurso
@inject NavigationManager navigationManager
@inject IServicioLogin SevicioLogin
@attribute [Authorize]

<h3>Modificar Curso</h3>
<hr />

<EditForm Model="@curso" OnInvalidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group row">
        <label for="NombreCurso" class="col-sm-2 col-form-label">Curso: </label>
        <div class="col-sm-10">
            <InputText id="NombreCurso" class="form-control" placeholder="Nombre del curso" @bind-Value="curso.NombreCurso"></InputText>
            <ValidationMessage For="@(() => curso.NombreCurso)"></ValidationMessage>
        </div>
    </div>
</EditForm>

<EditForm Model="@precio" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group row">
        <label for="Coste" class="col-sm-2 col-form-label">Precio: </label>
        <div class="col-sm-10">
            <InputNumber id="Coste" ParsingErrorMessage="Debe introducir un coste" class="form-control" placeholder="Precio del curso" @bind-Value="precio.Coste"></InputNumber>
            <ValidationMessage For="@(() => precio.Coste)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="FechaInicio" class="col-sm-2 col-form-label">Fecha inicio: </label>
        <div class="col-sm-10">
            <InputDate id="FechaInicio" ParsingErrorMessage="Debe seleccionar una fecha" class="form-control" placeholder="Fecha inicio del precio" @bind-Value="precio.FechaInicio"></InputDate>
            <ValidationMessage For="@(()=>precio.FechaInicio)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="FechaInicio" class="col-sm-2 col-form-label">Fecha Fin</label>
        <div class="col-sm-10">
            <InputDate ParsingErrorMessage="Debe seleccionar una fecha" id="FechaFin" class="form-control" placeholder="Fecha fin del precio" @bind-Value="precio.FechaFin"> </InputDate>
            <ValidationMessage For="@(() => precio.FechaFin)"></ValidationMessage>
        </div>
    </div>
</EditForm>

<div class="row content">
    <div class="col-md-2">
        <input type="submit" class="btn btn-primary" value="Guardar" @onclick="Modificar" />
    </div>
    <div class="col-md-2">
        <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
    </div>
</div>

<br />

<div>
    <button class="oi oi-plus" type="submit" @onclick="MostrarNuevoPrecio"></button>
    <strong>Agregar Precio</strong>
</div>


@if (mostrarPrecio)
{
    <EditForm Model="@nuevoPrecio" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group row">
            <label>Precio: </label>
            <div class="col-sm-10">
                <InputNumber id="Coste" ParsingErrorMessage="Debe introducir un coste" class="" @bind-Value="nuevoPrecio.Coste"></InputNumber>
                <ValidationMessage For="@(()=> nuevoPrecio.Coste)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group row">
            <label for="FechaInicio" class="col-sm-2 col-form-label">Fecha Inicio: </label>
            <div class="col-sm-10">
                <InputDate id="FechaInicio" ParsingErrorMessage="Debe seleccionar una fecha" class="form-control" @bind-Value="nuevoPrecio.FechaInicio"></InputDate>
                <ValidationMessage For="@(()=>nuevoPrecio.FechaInicio)"></ValidationMessage>
            </div>
        </div>

        <div class="form-group row">
            <label for="FechaFin" class="col-sm-2 col-form-label">Fecha fin: </label>
            <div class="col-sm-10">
                <InputDate id="FechaFin" ParsingErrorMessage="Debe seleccionar una fecha" class="form-control" @bind-Value="nuevoPrecio.FechaFin"></InputDate>
                <ValidationMessage For="@(()=>nuevoPrecio.FechaFin)"></ValidationMessage>
            </div>
        </div>

        <div class="row content">
            <div class="col-md-2">
                <input type="submit" class="btn btn-info" value="Agregar" @onclick="GuardarPrecio" />
            </div>
            <div class="col-md-2">
                <input type="button" value="Cancelar" class="btn btn-dark" @onclick="MostrarNuevoPrecio" />
            </div>
        </div>

    </EditForm>
}

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                            @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    [Parameter]
    public int idCurso { get; set; }
    [Parameter]
    public int idPrecio { get; set; }

    Curso curso = new Curso();
    Precio precio = new Precio();
    Precio nuevoPrecio = new Precio();
    Boolean mostrarPrecio = false;

    Boolean mostrarError = false;
    String textoError = String.Empty;

    Login l = new Login();
    UsuarioAPI u = new UsuarioAPI();

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
            l.Password = Environment.GetEnvironmentVariable("UsuarioAPI");
            u = (await SevicioLogin.SolicitudLogin(l));
            Environment.SetEnvironmentVariable("Token", u.Token);

            if (idCurso > 0)
            {
                curso = await ServicioCurso.DameCurso(idCurso, idPrecio);
                precio = curso.ListaPrecios[0];

                nuevoPrecio.Coste = 19.99;
                nuevoPrecio.FechaInicio = DateTime.Now;
                nuevoPrecio.FechaFin = DateTime.Now.AddDays(30);
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected async Task Modificar()
    {
        try
        {
            if (curso.NombreCurso != String.Empty &&
                precio.Coste >= 0 && precio.FechaFin != null &&
                precio.FechaInicio != null)
            {
                curso.ListaPrecios[0] = precio;
                curso = await ServicioCurso.ModificarCurso(idCurso, curso);
                navigationManager.NavigateTo("/listaCursos");
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void Cancelar()
    {
        navigationManager.NavigateTo("/listaCursos");
    }

    protected void MostrarNuevoPrecio()
    {
        if (mostrarPrecio)
            mostrarPrecio = false;
        else
            mostrarPrecio = true;
    }

    protected async void GuardarPrecio()
    {
        try
        {

            if (nuevoPrecio.Coste >= 0 && nuevoPrecio.FechaFin != null &&
               nuevoPrecio.FechaInicio != null)
            {

                curso.ListaPrecios[0] = precio;
                curso.ListaPrecios.Add(nuevoPrecio);

                curso = await ServicioCurso.ModificarCurso(idCurso, curso);

                navigationManager.NavigateTo("/listaCursos");
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void CerrarError()
    {
        mostrarError = false;

    }

    protected void MostrarError()
    {

        mostrarError = true;
    }

}
