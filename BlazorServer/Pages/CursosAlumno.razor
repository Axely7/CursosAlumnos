@page "/ListaCursosAlumno/{id:int}"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos;
@inject IServicioAlumnos ServicioAlumnos
@inject NavigationManager navigationManager
@inject IServicioLogin ServicioLogin
@attribute [Authorize]

<h1>Listado cursos</h1>
<div class="form-group row">
    <div class="col-sm-10">
        <div class="form-group row">
            <div class="col-sm-10">
                <a href="@($"InscribirAlumno/{id}")" class="btn btn-primary m-1">Inscribir alumno en curso</a>
            </div>
        </div>
    </div>
</div>

@if (alumno == null)
{
    <div class="spinner"></div>
}
else if (alumno.ListaCursos == null)
{
    <p class="text-danger">Este alumno no está inscrito en ningún curso</p>

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre</strong></th>
                <th><strong>Email</strong></th>
                <th><strong>Nombre curso</strong></th>
                <th><strong>Precio</strong></th>
                <th><strong>Fecha Inicio</strong></th>
                <th><strong>Fecha Fin</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Curso c in alumno.ListaCursos)
            {
                @foreach (Precio p in c.ListaPrecios)
                {
                    <tr>
                        <td>@alumno.Nombre</td>
                        <td>@alumno.Email</td>
                        <td>@c.NombreCurso</td>
                        <td class="text-success"> <strong>@p.Coste $</strong> </td>
                        <td>@p.FechaInicio.ToString("dd/MM/yyyy")</td>
                        <td>@p.FechaFin.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                            @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    [Parameter]
    public int id { get; set; }
    private Alumno alumno;

    Boolean mostrarError = false;
    String textoError = String.Empty;

    Login l = new Login();
    UsuarioAPI u = new UsuarioAPI();

    protected override async Task OnInitializedAsync()
    {

        l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
        l.Password = Environment.GetEnvironmentVariable("UsuarioAPI");
        u = (await ServicioLogin.SolicitudLogin(l));
        Environment.SetEnvironmentVariable("Token", u.Token);


        try
        {
            if (id > 0)
            {
                alumno = await ServicioAlumnos.CursosInscritosAlumno(id);
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void CerrarError()
    {
        mostrarError = false;
    }

    protected void MostrarError()
    {
        mostrarError = true;
    }
}
