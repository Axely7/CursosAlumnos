@page "/InscribirAlumno/{id:int}"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos;
@inject IServicioAlumnos ServicioAlumnos
@inject IServicioCursos ServicioCursos
@inject NavigationManager navigationManager


<h1>Inscribir Alumno</h1>


@if (listaCursos == null)
{
    <div class="spinner"></div>
}
else if (alumno.FechaBaja != null)
{
    <p class="text-danger">Este alumno está de baja.</p>
}
else if (listaCursos.Count == 0)
{
    <p class="text-danger">No hay cursos disponibles</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Curso</strong></th>
                <th><strong>Coste</strong></th>
                <th><strong>F. Inicio Precio</strong></th>
                <th><strong>F. Fin Precio</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Curso c in listaCursos)
                @foreach (Precio p in c.ListaPrecios)
                {
                    <tr>
                        <td>@c.NombreCurso</td>
                        <td class="text-success"><strong>$@p.Coste</strong></td>
                        <td>@p.FechaInicio.ToString("dd/MM/yyyy")</td>
                        <td>@p.FechaFin.ToString("dd/MM/yyyy")</td>
                        @if (DateTime.Now >= p.FechaInicio && DateTime.Now < p.FechaFin)
                        {
                            <td>
                                <input type="submit" class="btn btn-primary" value="Inscribir" @onclick="(() => Inscribir(c.Id, p.Id))" />
                            </td>
                        }
                    </tr>
                }
        </tbody>

    </table>
}

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                            @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}



@code {

    [Parameter]
    public int id { get; set; }

    public List<Curso> listaCursos { get; set; } = new List<Curso>();
    Alumno alumno = new Alumno();
    Boolean mostrarError = false;
    String textoError = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            listaCursos = (await ServicioCurso.DameCursos(id)).ToList();
            alumno = (await ServicioAlumnos.DameAlumno(id));
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected async Task Inscribir(int idCurso, int idprecio)
    {
        try
        {
            alumno = (await ServicioAlumnos.CursosInscribirAlumno(alumno, idCurso, idprecio));
            navigationManager.NavigateTo("/ListaCursosAlumno/" + id);
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void CerrarError()
    {
        mostrarError = false;

    }

    protected void MostrarError()
    {

        mostrarError = true;
    }

}
